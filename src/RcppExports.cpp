// This file was generated by Rcpp::compileAttributes
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// BSGDWrapper
List BSGDWrapper(NumericMatrix X, NumericVector Y, double C, size_t budget, double gamma, double epochs, std::string budgetMaintenanceStrategy, bool useBias, bool verbose);
RcppExport SEXP RcppShark_BSGDWrapper(SEXP XSEXP, SEXP YSEXP, SEXP CSEXP, SEXP budgetSEXP, SEXP gammaSEXP, SEXP epochsSEXP, SEXP budgetMaintenanceStrategySEXP, SEXP useBiasSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Y(YSEXP);
    Rcpp::traits::input_parameter< double >::type C(CSEXP);
    Rcpp::traits::input_parameter< size_t >::type budget(budgetSEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< double >::type epochs(epochsSEXP);
    Rcpp::traits::input_parameter< std::string >::type budgetMaintenanceStrategy(budgetMaintenanceStrategySEXP);
    Rcpp::traits::input_parameter< bool >::type useBias(useBiasSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    __result = Rcpp::wrap(BSGDWrapper(X, Y, C, budget, gamma, epochs, budgetMaintenanceStrategy, useBias, verbose));
    return __result;
END_RCPP
}
// DeepNetworkWrapperTrain
List DeepNetworkWrapperTrain(Rcpp::NumericMatrix X, Rcpp::NumericVector Y, size_t nHidden1, size_t nHidden2, double unsupRegularisation, double noiseStrength, std::size_t unsupIterations, double regularisation, std::size_t iterations, bool verbose);
RcppExport SEXP RcppShark_DeepNetworkWrapperTrain(SEXP XSEXP, SEXP YSEXP, SEXP nHidden1SEXP, SEXP nHidden2SEXP, SEXP unsupRegularisationSEXP, SEXP noiseStrengthSEXP, SEXP unsupIterationsSEXP, SEXP regularisationSEXP, SEXP iterationsSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type Y(YSEXP);
    Rcpp::traits::input_parameter< size_t >::type nHidden1(nHidden1SEXP);
    Rcpp::traits::input_parameter< size_t >::type nHidden2(nHidden2SEXP);
    Rcpp::traits::input_parameter< double >::type unsupRegularisation(unsupRegularisationSEXP);
    Rcpp::traits::input_parameter< double >::type noiseStrength(noiseStrengthSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type unsupIterations(unsupIterationsSEXP);
    Rcpp::traits::input_parameter< double >::type regularisation(regularisationSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type iterations(iterationsSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    __result = Rcpp::wrap(DeepNetworkWrapperTrain(X, Y, nHidden1, nHidden2, unsupRegularisation, noiseStrength, unsupIterations, regularisation, iterations, verbose));
    return __result;
END_RCPP
}
// DeepNetworkWrapperPredict
List DeepNetworkWrapperPredict(Rcpp::NumericMatrix X, Rcpp::NumericVector Y, Rcpp::NumericVector weights, size_t nHidden1, size_t nHidden2, size_t inputSize, size_t outputSize, bool verbose);
RcppExport SEXP RcppShark_DeepNetworkWrapperPredict(SEXP XSEXP, SEXP YSEXP, SEXP weightsSEXP, SEXP nHidden1SEXP, SEXP nHidden2SEXP, SEXP inputSizeSEXP, SEXP outputSizeSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type Y(YSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< size_t >::type nHidden1(nHidden1SEXP);
    Rcpp::traits::input_parameter< size_t >::type nHidden2(nHidden2SEXP);
    Rcpp::traits::input_parameter< size_t >::type inputSize(inputSizeSEXP);
    Rcpp::traits::input_parameter< size_t >::type outputSize(outputSizeSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    __result = Rcpp::wrap(DeepNetworkWrapperPredict(X, Y, weights, nHidden1, nHidden2, inputSize, outputSize, verbose));
    return __result;
END_RCPP
}
// ELMWrapperTrain
List ELMWrapperTrain(NumericMatrix X, NumericVector Y, size_t nHidden, bool verbose);
RcppExport SEXP RcppShark_ELMWrapperTrain(SEXP XSEXP, SEXP YSEXP, SEXP nHiddenSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Y(YSEXP);
    Rcpp::traits::input_parameter< size_t >::type nHidden(nHiddenSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    __result = Rcpp::wrap(ELMWrapperTrain(X, Y, nHidden, verbose));
    return __result;
END_RCPP
}
// ELMWrapperPredict
List ELMWrapperPredict(Rcpp::NumericMatrix X, Rcpp::NumericVector Y, Rcpp::NumericVector weights, Rcpp::NumericVector normalizerWeights, size_t nHidden, size_t inputSize, size_t outputSize, bool verbose);
RcppExport SEXP RcppShark_ELMWrapperPredict(SEXP XSEXP, SEXP YSEXP, SEXP weightsSEXP, SEXP normalizerWeightsSEXP, SEXP nHiddenSEXP, SEXP inputSizeSEXP, SEXP outputSizeSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type Y(YSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type normalizerWeights(normalizerWeightsSEXP);
    Rcpp::traits::input_parameter< size_t >::type nHidden(nHiddenSEXP);
    Rcpp::traits::input_parameter< size_t >::type inputSize(inputSizeSEXP);
    Rcpp::traits::input_parameter< size_t >::type outputSize(outputSizeSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    __result = Rcpp::wrap(ELMWrapperPredict(X, Y, weights, normalizerWeights, nHidden, inputSize, outputSize, verbose));
    return __result;
END_RCPP
}
// applyKMeansFromCSVFile
void applyKMeansFromCSVFile(std::string filename);
RcppExport SEXP RcppShark_applyKMeansFromCSVFile(SEXP filenameSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< std::string >::type filename(filenameSEXP);
    applyKMeansFromCSVFile(filename);
    return R_NilValue;
END_RCPP
}
// applyKMeans
NumericVector applyKMeans(NumericMatrix X);
RcppExport SEXP RcppShark_applyKMeans(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericMatrix >::type X(XSEXP);
    __result = Rcpp::wrap(applyKMeans(X));
    return __result;
END_RCPP
}
