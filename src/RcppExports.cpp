// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// BSGDWrapperTrain
List BSGDWrapperTrain(NumericMatrix X, NumericVector Y, double C, unsigned long budget, double gamma, double epochs, std::string budgetMaintenanceStrategy, bool verbose);
RcppExport SEXP RcppShark_BSGDWrapperTrain(SEXP XSEXP, SEXP YSEXP, SEXP CSEXP, SEXP budgetSEXP, SEXP gammaSEXP, SEXP epochsSEXP, SEXP budgetMaintenanceStrategySEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Y(YSEXP);
    Rcpp::traits::input_parameter< double >::type C(CSEXP);
    Rcpp::traits::input_parameter< unsigned long >::type budget(budgetSEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< double >::type epochs(epochsSEXP);
    Rcpp::traits::input_parameter< std::string >::type budgetMaintenanceStrategy(budgetMaintenanceStrategySEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(BSGDWrapperTrain(X, Y, C, budget, gamma, epochs, budgetMaintenanceStrategy, verbose));
    return rcpp_result_gen;
END_RCPP
}
// BSGDWrapperPredict
List BSGDWrapperPredict(NumericMatrix X, NumericVector alpha, NumericMatrix SV, NumericVector offset, double gamma, bool verbose);
RcppExport SEXP RcppShark_BSGDWrapperPredict(SEXP XSEXP, SEXP alphaSEXP, SEXP SVSEXP, SEXP offsetSEXP, SEXP gammaSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type SV(SVSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type offset(offsetSEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(BSGDWrapperPredict(X, alpha, SV, offset, gamma, verbose));
    return rcpp_result_gen;
END_RCPP
}
// DeepNetworkWrapperTrain
List DeepNetworkWrapperTrain(Rcpp::NumericMatrix X, Rcpp::NumericVector Y, unsigned long nHidden1, unsigned long nHidden2, double unsupRegularisation, double noiseStrength, unsigned long unsupIterations, double regularisation, unsigned long iterations, bool verbose);
RcppExport SEXP RcppShark_DeepNetworkWrapperTrain(SEXP XSEXP, SEXP YSEXP, SEXP nHidden1SEXP, SEXP nHidden2SEXP, SEXP unsupRegularisationSEXP, SEXP noiseStrengthSEXP, SEXP unsupIterationsSEXP, SEXP regularisationSEXP, SEXP iterationsSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type Y(YSEXP);
    Rcpp::traits::input_parameter< unsigned long >::type nHidden1(nHidden1SEXP);
    Rcpp::traits::input_parameter< unsigned long >::type nHidden2(nHidden2SEXP);
    Rcpp::traits::input_parameter< double >::type unsupRegularisation(unsupRegularisationSEXP);
    Rcpp::traits::input_parameter< double >::type noiseStrength(noiseStrengthSEXP);
    Rcpp::traits::input_parameter< unsigned long >::type unsupIterations(unsupIterationsSEXP);
    Rcpp::traits::input_parameter< double >::type regularisation(regularisationSEXP);
    Rcpp::traits::input_parameter< unsigned long >::type iterations(iterationsSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(DeepNetworkWrapperTrain(X, Y, nHidden1, nHidden2, unsupRegularisation, noiseStrength, unsupIterations, regularisation, iterations, verbose));
    return rcpp_result_gen;
END_RCPP
}
// DeepNetworkWrapperPredict
List DeepNetworkWrapperPredict(Rcpp::NumericMatrix X, Rcpp::NumericVector weights, unsigned long nHidden1, unsigned long nHidden2, unsigned long inputSize, unsigned long outputSize, bool verbose);
RcppExport SEXP RcppShark_DeepNetworkWrapperPredict(SEXP XSEXP, SEXP weightsSEXP, SEXP nHidden1SEXP, SEXP nHidden2SEXP, SEXP inputSizeSEXP, SEXP outputSizeSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< unsigned long >::type nHidden1(nHidden1SEXP);
    Rcpp::traits::input_parameter< unsigned long >::type nHidden2(nHidden2SEXP);
    Rcpp::traits::input_parameter< unsigned long >::type inputSize(inputSizeSEXP);
    Rcpp::traits::input_parameter< unsigned long >::type outputSize(outputSizeSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(DeepNetworkWrapperPredict(X, weights, nHidden1, nHidden2, inputSize, outputSize, verbose));
    return rcpp_result_gen;
END_RCPP
}
